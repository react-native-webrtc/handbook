import{_ as e,c as a,o as s,a as n}from"./app.df6e09a4.js";const g=JSON.parse('{"title":"Building WebRTC","description":"","frontmatter":{},"headers":[{"level":2,"title":"Obtaining the Module","slug":"obtaining-the-module"},{"level":2,"title":"Preparing","slug":"preparing"},{"level":3,"title":"iOS","slug":"ios"},{"level":3,"title":"Android","slug":"android"},{"level":3,"title":"Selecting the Branch","slug":"selecting-the-branch"},{"level":2,"title":"Compiling","slug":"compiling"},{"level":3,"title":"iOS","slug":"ios-1"},{"level":3,"title":"Android","slug":"android-1"},{"level":2,"title":"Debug Builds","slug":"debug-builds"}],"relativePath":"guides/building-webrtc.md"}'),t={name:"guides/building-webrtc.md"},o=n(`<h1 id="building-webrtc" tabindex="-1">Building WebRTC <a class="header-anchor" href="#building-webrtc" aria-hidden="true">#</a></h1><p>This guide will show you how to prepare your own WebRTC build and how to include it for use with this module for React Native.</p><p>First things first, clone our modules repository and look for the <a href="https://raw.githubusercontent.com/react-native-webrtc/react-native-webrtc/master/tools/build-webrtc.py" target="_blank" rel="noreferrer"><code>build-webrtc.py</code></a> Python script located in the <a href="https://github.com/react-native-webrtc/react-native-webrtc/tree/master/tools" target="_blank" rel="noreferrer"><code>tools</code></a> directory.</p><h2 id="obtaining-the-module" tabindex="-1">Obtaining the Module <a class="header-anchor" href="#obtaining-the-module" aria-hidden="true">#</a></h2><p>Simply run the following to clone the latest version of our modules repository.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">git clone https://github.com/react-native-webrtc/react-native-webrtc.git</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Or you can click <a href="https://github.com/react-native-webrtc/react-native-webrtc/archive/refs/heads/master.zip" target="_blank" rel="noreferrer">here</a> to download a compressed version.<br> Bare in mind you will have to extract it to continue.</p><h2 id="preparing" tabindex="-1">Preparing <a class="header-anchor" href="#preparing" aria-hidden="true">#</a></h2><p>Running the <code>build-webrtc.py</code> Python script with <code>--setup</code> will download all the necessary tools for building WebRTC. Now you have a staging area where the WebRTC source code and resulting build artifacts will be placed.</p><p>A <code>build_webrtc</code> directory will be created containing everything.<br> The setup process only needs to be carried out once per platform.</p><h3 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-hidden="true">#</a></h3><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">python build-webrtc.py --setup --ios ~/src/</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="android" tabindex="-1">Android <a class="header-anchor" href="#android" aria-hidden="true">#</a></h3><div class="warning custom-block"><p class="custom-block-title">Make sure you have the Java JDK package installed.</p><p>Simply install the the <code>default-jdk-headless</code> package if you&#39;re using a <code>Debian</code> based distribution of Linux, some other distributions might also use the same package name.</p></div><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">python build-webrtc.py --setup --android ~/src/</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="selecting-the-branch" tabindex="-1">Selecting the Branch <a class="header-anchor" href="#selecting-the-branch" aria-hidden="true">#</a></h3><p>Once the setup process has finished, the target branch must be selected.<br> Don&#39;t forget to also add any cherry-picks you might require.</p><p>The following example shows how the M87 branch was made for an iOS build.</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">~</span><span style="color:#A6ACCD;">/src/build_webrtc/webrtc/ios/src/</span></span>
<span class="line"><span style="color:#A6ACCD;">git checkout -b build-M87 refs/remotes/branch-heads/4280</span></span>
<span class="line"><span style="color:#676E95;">#git cherry-pick ...</span></span>
<span class="line"></span></code></pre></div><p>Now the code is ready for building.</p><div class="tip custom-block"><p class="custom-block-title">Notice that since M79 Chromium has changed the branch naming scheme.</p><p>For example M87 is WebRTC branch 4280.<br> For a full list of branches, see: <a href="https://chromiumdash.appspot.com/branches" target="_blank" rel="noreferrer">https://chromiumdash.appspot.com/branches</a></p></div><h2 id="compiling" tabindex="-1">Compiling <a class="header-anchor" href="#compiling" aria-hidden="true">#</a></h2><p>Now that most of the groundwork has been completed you can relax, get a drink.<br> Don&#39;t be alarmed by extreme CPU usage while things compile.</p><h3 id="ios-1" tabindex="-1">iOS <a class="header-anchor" href="#ios-1" aria-hidden="true">#</a></h3><p>If you&#39;ve switched branches then you need to run the following.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">python build-webrtc.py --sync --ios ~/src/</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Now you can build it.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">python build-webrtc.py --build --ios ~/src/</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>The build artifacts will be located in <code>~/src/build_webrtc/build/ios/</code>.</p><h3 id="android-1" tabindex="-1">Android <a class="header-anchor" href="#android-1" aria-hidden="true">#</a></h3><div class="warning custom-block"><p class="custom-block-title">Build Limitations.</p><p>WebRTC for Android can only be built on Linux currently.</p></div><p>If you&#39;ve switched branches then you need to run the following.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">python build-webrtc.py --sync --android ~/src/</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Now you can build it.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">python build-webrtc.py --build --android ~/src/</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>The build artifacts will be located in <code>~/src/build_webrtc/build/android/</code>.</p><h2 id="debug-builds" tabindex="-1">Debug Builds <a class="header-anchor" href="#debug-builds" aria-hidden="true">#</a></h2><div class="warning custom-block"><p class="custom-block-title">Performance Considerations.</p><p>Don&#39;t forget to build a non-debug version if you plan to take your app to production.</p></div><p>If you want to get your hands dirty, lose a bit of performance but require a debugging build then that can be accomplished by adding <code>--debug</code> together with <code>--build</code>.</p><p>The following will make an iOS debug build.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">python build-webrtc.py --build --ios --debug ~/src/</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>The following will make an Android debug build.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">python build-webrtc.py --build --android --debug ~/src/</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div>`,43),l=[o];function i(r,c,d,p,u,h){return s(),a("div",null,l)}const y=e(t,[["render",i]]);export{g as __pageData,y as default};
