"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[613],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=r.createContext({}),u=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),s=u(n),b=i,h=s["".concat(d,".").concat(b)]||s[b]||c[b]||l;return n?r.createElement(h,a(a({ref:t},p),{},{components:n})):r.createElement(h,a({ref:t},p))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,a=new Array(l);a[0]=s;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var u=2;u<l;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},1458:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>b,frontMatter:()=>o,metadata:()=>u,toc:()=>c});var r=n(7462),i=n(3366),l=(n(7294),n(3905)),a=["components"],o={id:"building",title:"Building the Module"},d=void 0,u={unversionedId:"developer-guide/building",id:"developer-guide/building",title:"Building the Module",description:"This document shows how to prepare a WebRTC build for its inclusion in this",source:"@site/docs/developer-guide/building.md",sourceDirName:"developer-guide",slug:"/developer-guide/building",permalink:"/handbook/docs/developer-guide/building",draft:!1,editUrl:"https://github.com/react-native-webrtc/handbook/edit/master/docs/developer-guide/building.md",tags:[],version:"current",frontMatter:{id:"building",title:"Building the Module"},sidebar:"docs",previous:{title:"Developer Guide",permalink:"/handbook/docs/category/developer-guide"},next:{title:"Contributing Guidelines",permalink:"/handbook/docs/developer-guide/contributing"}},p={},c=[{value:"Preparing the build",id:"preparing-the-build",level:2},{value:"iOS",id:"ios",level:3},{value:"Android",id:"android",level:3},{value:"Selecting the branch",id:"selecting-the-branch",level:3},{value:"Building",id:"building",level:2},{value:"iOS",id:"ios-1",level:3},{value:"Android",id:"android-1",level:3},{value:"Making debug builds",id:"making-debug-builds",level:3}],s={toc:c};function b(e){var t=e.components,n=(0,i.Z)(e,a);return(0,l.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This document shows how to prepare a WebRTC build for its inclusion in this\nplugin.",(0,l.kt)("br",{parentName:"p"}),"\n","The build will be made with the ",(0,l.kt)("inlineCode",{parentName:"p"},"build-webrtc.py")," Python script located in the\n",(0,l.kt)("inlineCode",{parentName:"p"},"tools/")," directory."),(0,l.kt)("h2",{id:"preparing-the-build"},"Preparing the build"),(0,l.kt)("p",null,"Running the script with ",(0,l.kt)("inlineCode",{parentName:"p"},"--setup")," will download all necessary tools for building\nWebRTC. The script must be run with a target directory where all WebRTC source\ncode and resulting build artifacts will be placed. A ",(0,l.kt)("inlineCode",{parentName:"p"},"build_webrtc")," directory\nwill be created containing it all.",(0,l.kt)("br",{parentName:"p"}),"\n","The setup process only needs to be carried out once."),(0,l.kt)("h3",{id:"ios"},"iOS"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"python build-webrtc.py --setup --ios ~/src/\n")),(0,l.kt)("h3",{id:"android"},"Android"),(0,l.kt)("p",null,"NOTE: Make sure you have the Java JDK installed beforehand. On Debian and\nUbuntu systems this can be accomplished by installing the ",(0,l.kt)("inlineCode",{parentName:"p"},"default-jdk-headless"),"\npackage."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"python build-webrtc.py --setup --android ~/src/\n")),(0,l.kt)("h3",{id:"selecting-the-branch"},"Selecting the branch"),(0,l.kt)("p",null,"Once the setup process has finished, the target branch must be selected, also\nadding any required cherry-picks. The following example shows how the M87 branch\nwas made:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cd ~/src/build_webrtc/webrtc/ios/src/\ngit checkout -b build-M87 refs/remotes/branch-heads/4280\n#git cherry-pick ...\ncd\n")),(0,l.kt)("p",null,"Now the code is ready for building!",(0,l.kt)("br",{parentName:"p"}),"\n","Notice that since M79 chromium changed the branch naming scheme, for example M87 is WebRTC branch 4280.\nFor a full list of branches, see: ",(0,l.kt)("a",{parentName:"p",href:"https://chromiumdash.appspot.com/branches"},"https://chromiumdash.appspot.com/branches")),(0,l.kt)("h2",{id:"building"},"Building"),(0,l.kt)("h3",{id:"ios-1"},"iOS"),(0,l.kt)("p",null,"If you have switched branches, first run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"python build-webrtc.py --sync --ios ~/src/\n")),(0,l.kt)("p",null,"Now build it:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"python build-webrtc.py --build --ios ~/src/\n")),(0,l.kt)("p",null,"The build artifacts will be located in ",(0,l.kt)("inlineCode",{parentName:"p"},"~/src/build_webrtc/build/ios/"),"."),(0,l.kt)("h3",{id:"android-1"},"Android"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"NOTE"),": WebRTC for Android can only be built on Linux.",(0,l.kt)("br",{parentName:"p"}),"\n","If you have switched branches, first run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"python build-webrtc.py --sync --android ~/src/\n")),(0,l.kt)("p",null,"Now build it:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"python build-webrtc.py --build --android ~/src/\n")),(0,l.kt)("p",null,"The build artifacts will be located in ",(0,l.kt)("inlineCode",{parentName:"p"},"~/src/build_webrtc/build/android/"),"."),(0,l.kt)("h3",{id:"making-debug-builds"},"Making debug builds"),(0,l.kt)("p",null,"Debug builds can be made by adding ",(0,l.kt)("inlineCode",{parentName:"p"},"--debug")," together with ",(0,l.kt)("inlineCode",{parentName:"p"},"--build"),". For example, to make a debug iOS build:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"python build-webrtc.py --build --ios --debug ~/src/\n")))}b.isMDXComponent=!0}}]);