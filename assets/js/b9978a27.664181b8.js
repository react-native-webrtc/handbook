"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[856],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,g=u["".concat(s,".").concat(m)]||u[m]||p[m]||i;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7250:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={id:"basic-usage",title:"Basic Usage"},s=void 0,d={unversionedId:"user-guide/basic-usage",id:"user-guide/basic-usage",title:"Basic Usage",description:"For starters we're going to import everything ready to use.",source:"@site/docs/user-guide/basic-usage.md",sourceDirName:"user-guide",slug:"/user-guide/basic-usage",permalink:"/handbook/docs/user-guide/basic-usage",draft:!1,editUrl:"https://github.com/react-native-webrtc/handbook/edit/master/docs/user-guide/basic-usage.md",tags:[],version:"current",frontMatter:{id:"basic-usage",title:"Basic Usage"},sidebar:"docs",previous:{title:"User Guide",permalink:"/handbook/docs/category/user-guide"},next:{title:"Call Guide",permalink:"/handbook/docs/user-guide/call-guide"}},c={},p=[{value:"Registering Globals",id:"registering-globals",level:2},{value:"Get Available Media Devices",id:"get-available-media-devices",level:2},{value:"Defining Media Constraints",id:"defining-media-constraints",level:2},{value:"Getting a Media Stream using getUserMedia",id:"getting-a-media-stream-using-getusermedia",level:2},{value:"Getting a Media Stream using getDisplayMedia",id:"getting-a-media-stream-using-getdisplaymedia",level:2},{value:"Destroying the Media Stream",id:"destroying-the-media-stream",level:2},{value:"Defining Peer Constraints",id:"defining-peer-constraints",level:2},{value:"Creating a Peer Connection",id:"creating-a-peer-connection",level:2},{value:"Destroying the Peer Connection",id:"destroying-the-peer-connection",level:2},{value:"Adding the Media Stream",id:"adding-the-media-stream",level:2},{value:"Creating a Data Channel",id:"creating-a-data-channel",level:2},{value:"Handling Data Channels",id:"handling-data-channels",level:2},{value:"Sending a Message via the Data Channel",id:"sending-a-message-via-the-data-channel",level:2},{value:"Destroying the Data Channel",id:"destroying-the-data-channel",level:2},{value:"Defining Session Constraints",id:"defining-session-constraints",level:2},{value:"Creating an Offer",id:"creating-an-offer",level:2},{value:"Creating an Answer",id:"creating-an-answer",level:2},{value:"Toggle the Active Microphone",id:"toggle-the-active-microphone",level:2},{value:"Switching the Active Camera",id:"switching-the-active-camera",level:2},{value:"Rendering the Media Stream",id:"rendering-the-media-stream",level:2}],u={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"For starters we're going to import everything ready to use.",(0,i.kt)("br",{parentName:"p"}),"\n","Most of the included functionality is similar to how you would deal with WebRTC in your browser.",(0,i.kt)("br",{parentName:"p"}),"\n","We support a lot of the official WebRTC APIs, see this ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection"},"document")," for more details.",(0,i.kt)("br",{parentName:"p"}),"\n","If you see functions that are listed in the document above but not listed below then they are likely not supported by this module yet and will most likely be supported in the near future, we're open to contributions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import {\n    ScreenCapturePickerView,\n    RTCPeerConnection,\n    RTCIceCandidate,\n    RTCSessionDescription,\n    RTCView,\n    MediaStream,\n    MediaStreamTrack,\n    mediaDevices,\n    registerGlobals\n} from 'react-native-webrtc';\n")),(0,i.kt)("h2",{id:"registering-globals"},"Registering Globals"),(0,i.kt)("p",null,"You'll only really need to use this function if you are mixing project development with libraries that use browser based WebRTC functions. Also applies if you are making your project compatible with react-native-web.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"registerGlobals();\n")),(0,i.kt)("p",null,"Here is a list of everything that will be linked up.",(0,i.kt)("br",{parentName:"p"}),"\n","You can also find a shim for react-native-web over ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/react-native-webrtc/react-native-webrtc-web-shim"},"here"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"navigator.mediaDevices.getUserMedia()"),(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"navigator.mediaDevices.getDisplayMedia()"),(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"navigator.mediaDevices.enumerateDevices()"),(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"window.RTCPeerConnection"),(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"window.RTCIceCandidate"),(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"window.RTCSessionDescription"),(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"window.MediaStream"),(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"window.MediaStreamTrack"),"  "),(0,i.kt)("h2",{id:"get-available-media-devices"},"Get Available Media Devices"),(0,i.kt)("p",null,"Some devices might not have more than 1 camera. The following will allow you to know how many cameras the device has.",(0,i.kt)("br",{parentName:"p"}),"\n","You can of-course use ",(0,i.kt)("inlineCode",{parentName:"p"},"enumerateDevices")," to list other media device information too.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"let cameraCount = 0;\n\ntry {\n    const devices = await mediaDevices.enumerateDevices();\n\n    devices.map( device => {\n        if ( device.kind != 'videoinput' ) { return; };\n\n        cameraCount = cameraCount + 1;\n    } );\n} catch( err ) {\n    // Handle Error\n};\n")),(0,i.kt)("h2",{id:"defining-media-constraints"},"Defining Media Constraints"),(0,i.kt)("p",null,"By default we're sending both audio and video.",(0,i.kt)("br",{parentName:"p"}),"\n","This will allow us to toggle the video stream during a call.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"let mediaConstraints = {\n    audio: true,\n    video: {\n        frameRate: 30,\n        facingMode: 'user'\n    }\n};\n")),(0,i.kt)("h2",{id:"getting-a-media-stream-using-getusermedia"},"Getting a Media Stream using getUserMedia"),(0,i.kt)("p",null,"If you only want a voice call then you can flip ",(0,i.kt)("inlineCode",{parentName:"p"},"isVoiceOnly")," over to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),".",(0,i.kt)("br",{parentName:"p"}),"\n","You can then cycle and enable or disable the video tracks on demand during a call.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"let localMediaStream;\nlet isVoiceOnly = false;\n\ntry {\n    const mediaStream = await mediaDevices.getUserMedia( mediaConstraints );\n\n    if ( isVoiceOnly ) {\n        let videoTrack = await mediaStream.getVideoTracks()[ 0 ];\n        videoTrack.enabled = false;\n    };\n\n    localMediaStream = mediaStream;\n} catch( err ) {\n    // Handle Error\n};\n")),(0,i.kt)("h2",{id:"getting-a-media-stream-using-getdisplaymedia"},"Getting a Media Stream using getDisplayMedia"),(0,i.kt)("p",null,"This will allow capturing the device screen, also requests permission on execution.",(0,i.kt)("br",{parentName:"p"}),"\n","Android 10+ requires that a foreground service is running otherwise capturing won't work, follow ",(0,i.kt)("a",{parentName:"p",href:"/docs/installation/android#screen-capture-support---android-10"},"this solution"),".  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"try {\n    const mediaStream = await mediaDevices.getDisplayMedia();\n\n    localMediaStream = mediaStream;\n} catch( err ) {\n    // Handle Error\n};\n")),(0,i.kt)("h2",{id:"destroying-the-media-stream"},"Destroying the Media Stream"),(0,i.kt)("p",null,"Cycling all of the tracks and stopping them is more than enough to clean up after a call has finished.",(0,i.kt)("br",{parentName:"p"}),"\n","You won't usually need to do this for remote tracks, only local.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"localMediaStream.getTracks().map(\n    track => track.stop()\n);\n\nlocalMediaStream = null;\n")),(0,i.kt)("h2",{id:"defining-peer-constraints"},"Defining Peer Constraints"),(0,i.kt)("p",null,"We're only specifying a STUN server but you should look at also using a TURN server.",(0,i.kt)("br",{parentName:"p"}),"\n","If you want to improve call reliability then check ",(0,i.kt)("a",{parentName:"p",href:"/docs/user-guide/call-reliability"},"this guide"),".  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"let peerConstraints = {\n    iceServers: [\n        {\n            urls: 'stun:stun.l.google.com:19302'\n        }\n    ]\n};\n")),(0,i.kt)("h2",{id:"creating-a-peer-connection"},"Creating a Peer Connection"),(0,i.kt)("p",null,"Here we're creating a peer connection required to get a call started.",(0,i.kt)("br",{parentName:"p"}),"\n","You can also hook up events by directly overwriting functions instead of using event listeners.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"let peerConnection = new RTCPeerConnection( peerConstraints );\n\npeerConnection.addEventListener( 'connectionstatechange', event => {} );\npeerConnection.addEventListener( 'icecandidate', event => {} );\npeerConnection.addEventListener( 'icecandidateerror', event => {} );\npeerConnection.addEventListener( 'iceconnectionstatechange', event => {} );\npeerConnection.addEventListener( 'icegatheringstatechange', event => {} );\npeerConnection.addEventListener( 'negotiationneeded', event => {} );\npeerConnection.addEventListener( 'signalingstatechange', event => {} );\npeerConnection.addEventListener( 'addstream', event => {} );\npeerConnection.addEventListener( 'removestream', event => {} );\n")),(0,i.kt)("h2",{id:"destroying-the-peer-connection"},"Destroying the Peer Connection"),(0,i.kt)("p",null,"When ending a call you should always make sure to dispose of everything ready for another call.",(0,i.kt)("br",{parentName:"p"}),"\n","The following should dispose of everything related to the peer connection.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"peerConnection._unregisterEvents();\npeerConnection.close();\npeerConnection = null;\n")),(0,i.kt)("h2",{id:"adding-the-media-stream"},"Adding the Media Stream"),(0,i.kt)("p",null,"After using one of the media functions above you can then add the media stream to the peer.",(0,i.kt)("br",{parentName:"p"}),"\n","The negotiation needed event will be triggered on the peer connection afterwords.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"peerConnection.addStream( localMediaStream );\n")),(0,i.kt)("h2",{id:"creating-a-data-channel"},"Creating a Data Channel"),(0,i.kt)("p",null,"Usually the call initialiser would create the data channel but it can be done on both sides.",(0,i.kt)("br",{parentName:"p"}),"\n","The negotiation needed event will be triggered on the peer connection afterwords.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"let datachannel = peerConnection.createDataChannel( 'my_channel' );\n\ndatachannel.addEventListener( 'open', event => {} );\ndatachannel.addEventListener( 'close', event => {} );\ndatachannel.addEventListener( 'message', message => {} );\n")),(0,i.kt)("h2",{id:"handling-data-channels"},"Handling Data Channels"),(0,i.kt)("p",null,"The following event is for the second client, not the client which created the data channel.",(0,i.kt)("br",{parentName:"p"}),"\n","Unless of-course you want both sides to create separate data channels.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"peerConnection.addEventListener( 'datachannel', event => {\n    let datachannel = event.channel;\n\n    // Now you've got the datachannel.\n    // You can hookup and use the same events as above ^\n} );\n")),(0,i.kt)("h2",{id:"sending-a-message-via-the-data-channel"},"Sending a Message via the Data Channel"),(0,i.kt)("p",null,"You can send a range of different data types over data channels, we're gong to send a simple string.",(0,i.kt)("br",{parentName:"p"}),"\n","Bare in mind there are limits so sending large amounts of data isn't usually advised.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"datachannel.send( 'Hey There!' );\n")),(0,i.kt)("h2",{id:"destroying-the-data-channel"},"Destroying the Data Channel"),(0,i.kt)("p",null,"When the peer connection is destroyed, data channels should also be destroyed automatically.",(0,i.kt)("br",{parentName:"p"}),"\n","But as good practice, you can always close them yourself.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"datachannel.close();\ndatachannel = null;\n")),(0,i.kt)("h2",{id:"defining-session-constraints"},"Defining Session Constraints"),(0,i.kt)("p",null,"As mentioned above by default we're going for the approach of offering both video and voice.",(0,i.kt)("br",{parentName:"p"}),"\n","That will allow you to enable and disable video streams on demand while a call is active.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"let sessionConstraints = {\n    mandatory: {\n        OfferToReceiveAudio: true,\n        OfferToReceiveVideo: true,\n        VoiceActivityDetection: true\n    }\n};\n")),(0,i.kt)("h2",{id:"creating-an-offer"},"Creating an Offer"),(0,i.kt)("p",null,"Executed by the call initialiser after media streams have been added to the peer connection.",(0,i.kt)("br",{parentName:"p"}),"\n","ICE Candidate creation and gathering will start as soon as an offer has been created.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"try {\n    const offerDescription = await peerConnection.createOffer( sessionConstraints );\n    await peerConnection.setLocalDescription( offerDescription );\n\n    // Send the offerDescription to the other participant.\n} catch( err ) {\n    // Handle Errors\n};\n")),(0,i.kt)("h2",{id:"creating-an-answer"},"Creating an Answer"),(0,i.kt)("p",null,"All parties will need to ensure they are handling ICE Candidates correctly.",(0,i.kt)("br",{parentName:"p"}),"\n","Otherwise the offer and answer handshake stage will go a little wonky.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"try {\n    // Use the received offerDescription\n    const offerDescription = new RTCSessionDescription( offerDescription );\n    await peerConnection.setRemoteDescription( offerDescription );\n\n    const answerDescription = await peerConnection.createAnswer( sessionConstraints );\n    await peerConnection.setLocalDescription( answerDescription );\n\n    // Send the answerDescription back as a response to the offerDescription.\n} catch( err ) {\n    // Handle Errors\n};\n")),(0,i.kt)("h2",{id:"toggle-the-active-microphone"},"Toggle the Active Microphone"),(0,i.kt)("p",null,"During an active call you might want to mute your microphone.",(0,i.kt)("br",{parentName:"p"}),"\n","Easy to accomplish by flipping the track enabled value to false, also possible on remote tracks.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"let isMuted = false;\n\ntry {\n    const audioTrack = await localMediaStream.getAudioTracks()[ 0 ];\n    audioTrack.enabled = !audioTrack.enabled;\n\n    isMuted = !isMuted;\n} catch( err ) {\n    // Handle Error\n};\n")),(0,i.kt)("h2",{id:"switching-the-active-camera"},"Switching the Active Camera"),(0,i.kt)("p",null,"Naturally we assume you'll be using the front camera by default when starting a call.",(0,i.kt)("br",{parentName:"p"}),"\n","So we set ",(0,i.kt)("inlineCode",{parentName:"p"},"isFrontCam")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," and let the value flip on execution.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"let isFrontCam = true;\n\ntry {\n    // Taken from above, we don't want to flip if we don't have another camera.\n    if ( cameraCount < 2 ) { return; };\n\n    const videoTrack = await localMediaStream.getVideoTracks()[ 0 ];\n    videoTrack._switchCamera();\n\n    isFrontCam = !isFrontCam;\n} catch( err ) {\n    // Handle Error\n};\n")),(0,i.kt)("h2",{id:"rendering-the-media-stream"},"Rendering the Media Stream"),(0,i.kt)("p",null,"Once you've gained a local and/or remote stream then rendering it is as follows.",(0,i.kt)("br",{parentName:"p"}),"\n","Don't forget, the user facing camera is usually mirrored.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"<RTCView\n    mirror={true}\n    objectFit={'cover'}\n    streamURL={localMediaStream.toURL()}\n    zOrder={0}\n/>\n")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"mirror"),(0,i.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,i.kt)("td",{parentName:"tr",align:"left"},"false"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Indicates whether the video specified by ",(0,i.kt)("inlineCode",{parentName:"td"},"streamURL")," should be mirrored.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"objectFit"),(0,i.kt)("td",{parentName:"tr",align:"left"},"string"),(0,i.kt)("td",{parentName:"tr",align:"left"},"'contain'"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Can be ",(0,i.kt)("inlineCode",{parentName:"td"},"'contain'")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"'cover'")," nothing more or less.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"streamURL"),(0,i.kt)("td",{parentName:"tr",align:"left"},"string"),(0,i.kt)("td",{parentName:"tr",align:"left"},"'streamURL'"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Required to have an actual video stream rendering.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"zOrder"),(0,i.kt)("td",{parentName:"tr",align:"left"},"number"),(0,i.kt)("td",{parentName:"tr",align:"left"},"0"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Similar to zIndex.")))))}m.isMDXComponent=!0}}]);